#include "imports/stdlib.fc";
#include "utils.fc";

const op::deposit_ton = "op::deposit_ton"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::withdarw_ton = "op::withdarw_ton"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::withdarw_not = "op::withdarw_not"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables
const error::not_staked = 700;
const error::not_enough = 701;
const error::jetton_sender = 109;
const error::fund = 103;
const error::not_admin = 702;
const error::locked = 703;

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract

global int ctx_lock_timer;
global cell ctx_not_states;
global cell ctx_ton_states;
global cell ctx_jetton_info;
global cell ctx_admin_info;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_lock_timer = ds~load_uint(32);
    ctx_jetton_info = ds~load_ref();
    ctx_admin_info = ds~load_ref();
    ctx_not_states = ds~load_dict();
    ctx_ton_states = ds~load_dict();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_lock_timer, 32)
            .store_ref(ctx_jetton_info)
            .store_ref(ctx_admin_info)
            .store_dict(ctx_not_states)
            .store_dict(ctx_ton_states)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();


    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::deposit_ton) {
        int current_time = now();

        (slice data,int f) = ctx_ton_states.udict_get?(256, slice_hash(sender_address));
        if (f == 0) {
            ctx_ton_states~udict_set(256, slice_hash(sender_address), begin_cell().store_coins(msg_value).store_coins(current_time + ctx_lock_timer).end_cell().begin_parse());
        } else {
            ctx_ton_states~udict_set(256, slice_hash(sender_address), begin_cell().store_coins(data~load_coins() + msg_value).store_coins(current_time + ctx_lock_timer).end_cell().begin_parse());
        }

        save_data();
        return ();
    }

    ;; transfer the not to contract.
    if (op == op::transfer_notification()) {
        int current_time = now();
        ;; should check if jetton is valid
        int send_amount = in_msg_body~load_coins(); ;; Jettons send

        slice jetton_info_slice = ctx_jetton_info.begin_parse();
        slice jetton_master_address = jetton_info_slice~load_msg_addr();
        cell JETTON_BYTECODE = jetton_info_slice~load_ref();
        throw_unless(error::jetton_sender, equal_slices(sender_address, calculate_user_jetton_wallet_address(my_address(), jetton_master_address, JETTON_BYTECODE)));
        slice origin_sender = in_msg_body~load_msg_addr(); ;; transfer origin address (not used)
        slice dict_key = begin_cell().store_slice(origin_sender).end_cell().begin_parse();
        (slice data, int f) = ctx_not_states.udict_get?(256, slice_hash(dict_key));
        int jettonAmount = 0;
        ifnot(f == 0) {
            jettonAmount = data~load_coins();
        }

        ctx_not_states~udict_set(256, slice_hash(dict_key),
            begin_cell().store_coins(jettonAmount + send_amount).store_coins(current_time + ctx_lock_timer).end_cell().begin_parse());

        ;;emit_log_simple(op::stake_TONNEL(), begin_cell().store_uint(0,4).store_slice(origin_sender).store_coins(send_amount).store_uint(creed_id, 64).end_cell().begin_parse());
        save_data();
        return ();
    }

    if (op == op::withdarw_not) {
        int current_time = now();
        int amount_to_withdraw = in_msg_body~load_coins();
        (slice data, int f) = ctx_not_states.udict_get?(256, slice_hash(sender_address));
        if(f == 0) {
            throw(error::not_staked);
        }

        ;;Check The time is ended
        int jettonAmount = data~load_coins();
        throw_unless(error::not_enough, jettonAmount >= amount_to_withdraw);
        int time = data~load_coins();
        throw_unless(error::locked, current_time >= time);

        slice jetton_info_slice = ctx_jetton_info.begin_parse();
        slice jetton_master_address = jetton_info_slice~load_msg_addr();
        cell JETTON_BYTECODE = jetton_info_slice~load_ref();
        send_jetton(sender_address, amount_to_withdraw, jetton_master_address, JETTON_BYTECODE);

        ctx_not_states~udict_set(256, slice_hash(sender_address),
            begin_cell().store_coins(jettonAmount - amount_to_withdraw).store_coins(time).end_cell().begin_parse());

        ;;emit_log_simple(op::withdraw_TONNEL(), begin_cell().store_uint(1,4).store_coins(amount_to_withdraw).store_uint(creed_id, 64).end_cell().begin_parse());
        save_data();
        return ();
    }

    if (op == op::withdarw_ton) {
        int current_time = now();
        int amount_to_withdraw = in_msg_body~load_coins();

        (slice data, int f) = ctx_ton_states.udict_get?(256, slice_hash(sender_address));
        if(f == 0) {
            throw(error::not_staked);
        }

        int tonAmount = data~load_coins();
        int time = data~load_coins();
        throw_unless(error::not_enough, tonAmount >= amount_to_withdraw);
        throw_unless(error::locked, current_time >= time);

        ctx_ton_states~udict_set(256, slice_hash(sender_address),
            begin_cell()
            .store_coins(tonAmount - amount_to_withdraw)
            .store_coins(time)
            .end_cell().begin_parse()
        );

        send_ton(sender_address,amount_to_withdraw,3);
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

(tuple) get_user_state(slice user) method_id {
    load_data();

    tuple res = empty_tuple();
        (slice data, int f) = ctx_not_states.udict_get?(256, slice_hash(user));
        int jettonAmount = 0;
        ifnot (f == 0) {
            jettonAmount = data~load_coins();
        }

        res~tpush(jettonAmount);

    return res;
}
